LerER2_countdata_Ihate_deseq <-  read.table("/Andy_rawdata_Lercerun2/L_erthrto_run2/Outdir_rerun/gene_count_matrix.trx.full.fixed.txt", header = TRUE)



####DESEQ_function_Ler_veryhigh
Ler_High_function=function(LER_COUNT) {
Ler_Countdata_MSTRG_Lerce_prots_Deseq <- LER_COUNT[, c(4, 7:12)]
  Ler_countdata_Ihate_deseq_avg <- data.frame(
    ID = Ler_Countdata_MSTRG_Lerce_prots_Deseq$Geneid,
    Myc = rowMeans(select(Ler_Countdata_MSTRG_Lerce_prots_Deseq, 2:4)),
    Hyp = rowMeans(select(Ler_Countdata_MSTRG_Lerce_prots_Deseq, 5:7))
  )
  rownames(Ler_Countdata_MSTRG_Lerce_prots_Deseq) <-Ler_Countdata_MSTRG_Lerce_prots_Deseq$Geneid 
  Ler_Countdata_MSTRG_Lerce_prots_Deseq <- Ler_Countdata_MSTRG_Lerce_prots_Deseq[, -1]
  
  
  stage <- rep("P", dim(Ler_Countdata_MSTRG_Lerce_prots_Deseq)[2])
  stage[grep("_M", names(Ler_Countdata_MSTRG_Lerce_prots_Deseq))] <- "M"
  Coldata_Ler_prots_all <- data.frame(Stage=stage)
  rownames(Coldata_Ler_prots_all) <- names(Ler_Countdata_MSTRG_Lerce_prots_Deseq)
  
  dds_Lerprots_all_inc_MSTRG <- DESeqDataSetFromMatrix(countData = round(Ler_Countdata_MSTRG_Lerce_prots_Deseq),
                                                         colData=Coldata_Ler_prots_all,
                                                         design= ~ Stage)
  dds_Lerprots_all_inc_MSTRG$Stage <- relevel(dds_Lerprots_all_inc_MSTRG$Stage, ref="M")
  dds_Lerprots_all_inc_MSTRG <- DESeq(dds_Lerprots_all_inc_MSTRG)
  res <- results(dds_Lerprots_all_inc_MSTRG)
 
  Ler_table <-  data.frame(Log=(res$log2FoldChange), Pvalue=(res$pvalue))
  rownames(Ler_table) <- rownames(Ler_Countdata_MSTRG_Lerce_prots_Deseq)
  Ler_May_table_Morethan2 <- subset(Ler_table, Log> 2 & Pvalue < 0.05)
  Ler_May_table_Lessthan2 <- subset(Ler_table, Log< -2 & Pvalue < 0.05)
  Ler_Countdata_tokeep <- Ler_countdata_Ihate_deseq_avg %>% filter(ID %in% rownames(Ler_May_table_Morethan2) | ID %in% rownames(Ler_May_table_Lessthan2))
  Ler_Countdata_tokeep_VeryHIGH=Ler_Countdata_tokeep %>% filter(Myc > 10000 | Hyp > 10000)
  ###Removing duplicates
  Ler_Countdata_tokeep_VeryHIGH_no_duplicates <- !duplicated(Ler_Countdata_tokeep_VeryHIGH[, c("Myc", "Hyp")])
  Ler_Countdata_tokeep <- Ler_Countdata_tokeep_VeryHIGH[Ler_Countdata_tokeep_VeryHIGH_no_duplicates, ] #224
  return(Ler_Countdata_tokeep)
}

Lerce2_Countdata_tokeep_VeryHIGH=Ler_High_function(Lerce2_countdata_Ihate_deseq)
LerER2_Countdata_tokeep_VeryHIGH <- Ler_High_function(LerER2_countdata_Ihate_deseq) ##244


Copci_deseq <- function(Copci_countdata_May, condition) {
  Developmental_order <- c(1, 2, 3, 4, 5, 6, 24, 25, 26, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 7, 8, 9, 10, 11, 12)
  Copci_expression_ordered_may <-Copci_countdata_May[, Developmental_order] 
  Developmental_order_May <- Copci_expression_ordered_may[, c(4, 7:29)]
  Copci_countsdata <- Developmental_order_May
  ####Avg_number
  C_Cin_May_Avg <- data.frame(
    ID = Copci_countsdata$Geneid,
    Myc = rowMeans(select(Copci_countsdata, 2:4)),
    Hyp = rowMeans(select(Copci_countsdata, 5:7)),
    P1 = rowMeans(select(Copci_countsdata, 8:11)),
    P2 = rowMeans(select(Copci_countsdata, 12:15)),
    YFB_C = rowMeans(select(Copci_countsdata, 16:18)),
    YFB_L = rowMeans(select(Copci_countsdata, 19:21)),
    YFB_S = rowMeans(select(Copci_countsdata, 22:24))
  )
  CC_Count_Data_Ordered <- Copci_countsdata
  Names=c("ProteinID","Myc1", "Myc2", "Myc3", "H1", "H2", "H3", "P1_1", "P1_2", "P1_3", "P1_4", "P2_1", "P2_2", "P2_3", "P2_4", "YFP_P_1", "YFP_P_2", "YFP_P_3",
          "YFP_G_1", "YFP_G_2", "YFP_G_3", "YFP_S_1", "YFP_S_2", "YFP_S_3")
  colnames(CC_Count_Data_Ordered) <- Names
  
  ##multiple developmental time frames for Deseq 
  rownames(CC_Count_Data_Ordered) <-CC_Count_Data_Ordered$ProteinID
  Myc_H <- CC_Count_Data_Ordered[, 2:7]
  Myc_P1 <- CC_Count_Data_Ordered[, c(2:4, 8:11)]
  Myc_P2 <- CC_Count_Data_Ordered[, c(2:4, 12:15)]
  Myc_YFP_P <- CC_Count_Data_Ordered[, c(2:4, 16:18)]
  Myc_YFP_G <- CC_Count_Data_Ordered[, c(2:4, 19:21)]
  Myc_YFP_S <- CC_Count_Data_Ordered[, c(2:4, 22:24)]
  CC_Count_Data_Ordered <- CC_Count_Data_Ordered[, -1]
  
  #Setting up each time frame to work with Deseq
  #Myc_H
  Myc_H_stage <- rep("P", dim(Myc_H)[2])
  Myc_H_stage[grep("Myc", names(Myc_H))] <- "M"
  Myc_H_stage <- data.frame(Stage=Myc_H_stage)
  rownames(Myc_H_stage) <- names(Myc_H)
  
  #Myc_P1
  Myc_P1_stage <- rep("P", dim(Myc_P1)[2])
  Myc_P1_stage[grep("Myc", names(Myc_P1))] <- "M"
  Myc_P1_stage <- data.frame(Stage=Myc_P1_stage)
  rownames(Myc_P1_stage) <- names(Myc_P1)
  
  #Myc_P2
  Myc_P2_stage <- rep("P", dim(Myc_P2)[2])
  Myc_P2_stage[grep("Myc", names(Myc_P2))] <- "M"
  Myc_P2_stage <- data.frame(Stage=Myc_P2_stage)
  rownames(Myc_P2_stage) <- names(Myc_P2)
  
  
  if (condition == "Hyp") {
  #Myc_H
  Myc_H_dds <- DESeqDataSetFromMatrix(countData = round(Myc_H),
                                      colData = Myc_H_stage,
                                      design = ~ Stage)
  Myc_H_dds$Stage <- relevel(Myc_H_dds$Stage, ref="M")
  Myc_H_dds <- DESeq(Myc_H_dds)
  Myc_H_res <- results(Myc_H_dds)
  summary(Myc_H_res)
  Myc_H_table <- data.frame(Log=(Myc_H_res$log2FoldChange), Pvalue=(Myc_H_res$pvalue))
  rownames(Myc_H_table) <- rownames(Myc_H)
  Myc_H_table_Morethan2 <- subset(Myc_H_table, Log> 2 & Pvalue < 0.05)
  Myc_H_table_Lessthan2 <- subset(Myc_H_table, Log< -2 & Pvalue < 0.05)
  CC_H_Countdata <- C_Cin_May_Avg %>% filter(ID %in% rownames(Myc_H_table_Morethan2) | ID %in% rownames(Myc_H_table_Lessthan2))
  CC_H_Countdata_high=CC_H_Countdata %>% filter(Myc > 10000 | Hyp > 10000)
  CC_H_Countdata_high$Myc_Hyp_change <- CC_H_Countdata_high$Hyp - CC_H_Countdata_high$Myc
  CC_H_Countdata_high <- CC_H_Countdata_high %>%
    select(ID, Myc_Hyp_change) %>%
    mutate(
      ID = gsub("\\.", "_", ID),  # Replace dots with underscores
      ID = gsub("rna-gnl\\|WGS:JAAGWA\\|", "", ID),  # Remove the specific prefix
      ID = paste0("CC_", ID)  # Append 'CC_' to the beginning
    )
  CC_H_Countdata_high_filt <- !duplicated(CC_H_Countdata_high[, "Myc_Hyp_change"])
  CC_H_Countdata_high <- CC_H_Countdata_high[CC_H_Countdata_high_filt, ]
  data=CC_H_Countdata_high
  return(CC_H_Countdata_high)
  } else if (condition == "P1") {
    #Myc_P1
    Myc_P1_dds <- DESeqDataSetFromMatrix(countData = round(Myc_P1),
                                         colData = Myc_P1_stage,
                                         design = ~ Stage)
    Myc_P1_dds$Stage <- relevel(Myc_P1_dds$Stage, ref="M")
    Myc_P1_dds <- DESeq(Myc_P1_dds)
    Myc_P1_res <- results(Myc_P1_dds)
    summary(Myc_P1_res)
    Myc_P1_table <- data.frame(Log=(Myc_P1_res$log2FoldChange), Pvalue=(Myc_P1_res$pvalue))
    rownames(Myc_P1_table) <- rownames(Myc_P1)
    Myc_P1_table_Morethan2 <- subset(Myc_P1_table, Log> 2 & Pvalue < 0.05)
    Myc_P1_table_Lessthan2 <- subset(Myc_P1_table, Log< -2 & Pvalue < 0.05)
    CC_P1_Countdata <- C_Cin_May_Avg %>% filter(ID %in% rownames(Myc_P1_table_Morethan2) | ID %in% rownames(Myc_P1_table_Lessthan2))
    CC_P1_Countdata_high=CC_P1_Countdata %>% filter(Myc > 10000 | P1 > 10000)
    CC_P1_Countdata_high$Myc_P1_change <- CC_P1_Countdata_high$P1 - CC_P1_Countdata_high$Myc
    CC_P1_Countdata_high <- CC_P1_Countdata_high %>%
      distinct(Myc_P1_change, .keep_all = TRUE)
    CC_P1_Countdata_high <- CC_P1_Countdata_high %>%
      select(ID, Myc_P1_change) %>%                    # Select the first and ninth columns
      mutate(
        ID = gsub("\\.", "_", ID),        # Replace dots with underscores
        ID = gsub("rna-gnl\\|WGS:JAAGWA\\|", "", ID), # Remove the specific prefix
        ID = paste0("CC_", ID)   # Append 'CC_' to the beginning
      )
        return(CC_P1_Countdata_high)
  } else if (condition == "P2") {
    
    #Myc_P2
    Myc_P2_dds <- DESeqDataSetFromMatrix(countData = round(Myc_P2),
                                         colData = Myc_P2_stage,
                                         design = ~ Stage)
    Myc_P2_dds$Stage <- relevel(Myc_P2_dds$Stage, ref="M")
    Myc_P2_dds <- DESeq(Myc_P2_dds)
    Myc_P2_res <- results(Myc_P2_dds)
    summary(Myc_P2_res)
    Myc_P2_table <- data.frame(Log=(Myc_P2_res$log2FoldChange), Pvalue=(Myc_P2_res$pvalue))
    rownames(Myc_P2_table) <- rownames(Myc_P2)
    Myc_P2_table_Morethan2 <- subset(Myc_P2_table, Log> 2 & Pvalue < 0.05)
    Myc_P2_table_Lessthan2 <- subset(Myc_P2_table, Log< -2 & Pvalue < 0.05)
    CC_P2_Countdata <- C_Cin_May_Avg %>% filter(ID %in% rownames(Myc_P2_table_Morethan2) | ID %in% rownames(Myc_P2_table_Lessthan2))
    CC_P2_Countdata_high$Myc_P2_change <- CC_P2_Countdata_high$P2 - CC_P2_Countdata_high$Myc
    CC_P2_Countdata_high <- CC_P2_Countdata_high %>%
      select(ID, Myc_P2_change) %>%                    # Select the first and ninth columns
      mutate(
        ID = gsub("\\.", "_", ID),        # Replace dots with underscores
        ID = gsub("rna-gnl\\|WGS:JAAGWA\\|", "", ID), # Remove the specific prefix
        ID = paste0("CC_", ID)   # Append 'CC_' to the beginning
      )
    CC_P2_Countdata_high_dupl <- !duplicated(CC_P2_Countdata_high[, c("Myc_P2_change")])
    CC_P2_Countdata_high <- CC_P2_Countdata_high[CC_P2_Countdata_high_dupl, ]
    return(CC_P2_Countdata_high)
  }
  
}
CC_Myc_Hyp_VeryHigh <- Copci_deseq(Copci_countdata_May, "Hyp") ###691
CC_Myc_P1_VeryHigh <-  Copci_deseq(Copci_countdata_May, "P1") #857
CC_Myc_P2_VeryHigh <-  Copci_deseq(Copci_countdata_May, "P2") #
